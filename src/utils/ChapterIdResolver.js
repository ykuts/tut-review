// src/utils/ChapterIdResolver.js - Helper for resolving chapter IDs
import coursesService from '../services/coursesService';

/**
 * Chapter ID Resolver - —Ä–µ—à–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—É —Å –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ–º ID –≥–ª–∞–≤
 */
export class ChapterIdResolver {
    
    /**
     * Cache –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö ID –∏ —Ä–µ–∞–ª—å–Ω—ã—Ö ID –∏–∑ –ë–î
     */
    static chapterIdCache = new Map();
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π chapter ID –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
     * –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π ID (courseId_chapter_X), –ø–æ–ø—ã—Ç–∞–µ—Ç—Å—è –Ω–∞–π—Ç–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Ä–µ–∞–ª—å–Ω—ã–π ID
     */
    static async resolveChapterId(generatedChapterId, courseId = null, moduleId = null) {
        try {
            console.log('üîç Resolving chapter ID:', generatedChapterId);
            
            // –ï—Å–ª–∏ ID –≤—ã–≥–ª—è–¥–∏—Ç –∫–∞–∫ –Ω–∞—Å—Ç–æ—è—â–∏–π UUID, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –∫–∞–∫ –µ—Å—Ç—å
            if (this.isRealChapterId(generatedChapterId)) {
                console.log('‚úÖ Using real chapter ID as is:', generatedChapterId);
                return generatedChapterId;
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
            if (this.chapterIdCache.has(generatedChapterId)) {
                const cachedId = this.chapterIdCache.get(generatedChapterId);
                console.log('üìã Found cached chapter ID:', cachedId);
                return cachedId;
            }
            
            // –ü–æ–ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Ä–µ–∞–ª—å–Ω—ã–π chapter ID —á–µ—Ä–µ–∑ API
            const realChapterId = await this.findRealChapterId(generatedChapterId, courseId, moduleId);
            
            if (realChapterId) {
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
                this.chapterIdCache.set(generatedChapterId, realChapterId);
                console.log('‚úÖ Resolved and cached chapter ID:', generatedChapterId, '‚Üí', realChapterId);
                return realChapterId;
            }
            
            // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π
            console.log('‚ö†Ô∏è Could not resolve chapter ID, using original:', generatedChapterId);
            return generatedChapterId;
            
        } catch (error) {
            console.error('‚ùå Error resolving chapter ID:', error);
            return generatedChapterId; // Fallback to original
        }
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ ID –Ω–∞—Å—Ç–æ—è—â–∏–º UUID –≥–ª–∞–≤—ã
     */
    static isRealChapterId(chapterId) {
        // –ù–∞—Å—Ç–æ—è—â–∏–µ chapter ID –æ–±—ã—á–Ω–æ UUID —Ñ–æ—Ä–º–∞—Ç–∞: xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx
        const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i;
        
        // –ò–ª–∏ MongoDB ObjectId: 24-—Å–∏–º–≤–æ–ª—å–Ω–∞—è hex —Å—Ç—Ä–æ–∫–∞
        const objectIdRegex = /^[0-9a-f]{24}$/i;
        
        return uuidRegex.test(chapterId) || objectIdRegex.test(chapterId);
    }
    
    /**
     * –ù–∞–π—Ç–∏ —Ä–µ–∞–ª—å–Ω—ã–π chapter ID —á–µ—Ä–µ–∑ API
     */
    static async findRealChapterId(generatedId, courseId, moduleId) {
        try {
            console.log('üîé Searching for real chapter ID for:', generatedId);
            
            // –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä –≥–ª–∞–≤—ã –∏–∑ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ ID
            const chapterMatch = generatedId.match(/_chapter_(\d+)$/);
            const chapterIndex = chapterMatch ? parseInt(chapterMatch[1]) : 0;
            
            console.log('üìä Extracted chapter index:', chapterIndex);
            
            // –°—Ç—Ä–∞—Ç–µ–≥–∏—è 1: –ü–æ–ª—É—á–∏—Ç—å –≥–ª–∞–≤—ã —á–µ—Ä–µ–∑ moduleId
            if (moduleId) {
                try {
                    const chaptersResult = await coursesService.getChaptersByModule(moduleId);
                    if (chaptersResult.success && chaptersResult.data.length > chapterIndex) {
                        const realChapter = chaptersResult.data[chapterIndex];
                        console.log('‚úÖ Found real chapter via module:', realChapter);
                        return realChapter.id || realChapter.chapterId || realChapter._id;
                    }
                } catch (moduleError) {
                    console.warn('‚ö†Ô∏è Failed to get chapters by module:', moduleError);
                }
            }
            
            // –°—Ç—Ä–∞—Ç–µ–≥–∏—è 2: –ü–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å —Ü–µ–ª–∏–∫–æ–º –∏ –Ω–∞–π—Ç–∏ –≥–ª–∞–≤—É –ø–æ –∏–Ω–¥–µ–∫—Å—É
            if (courseId) {
                try {
                    const courseResult = await coursesService.getCourseById(courseId);
                    if (courseResult.success && courseResult.data.all_chapters) {
                        const allChapters = courseResult.data.all_chapters;
                        if (allChapters.length > chapterIndex) {
                            const realChapter = allChapters[chapterIndex];
                            console.log('‚úÖ Found real chapter via course:', realChapter);
                            return realChapter.id || realChapter.chapterId || realChapter._id;
                        }
                    }
                } catch (courseError) {
                    console.warn('‚ö†Ô∏è Failed to get course details:', courseError);
                }
            }
            
            // –°—Ç—Ä–∞—Ç–µ–≥–∏—è 3: –ü–æ–∏—Å–∫ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É (–µ—Å–ª–∏ –µ—Å—Ç—å API –¥–ª—è –ø–æ–∏—Å–∫–∞)
            return await this.searchChapterByPattern(generatedId, courseId);
            
        } catch (error) {
            console.error('‚ùå Error finding real chapter ID:', error);
            return null;
        }
    }
    
    /**
     * –ü–æ–∏—Å–∫ –≥–ª–∞–≤—ã –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É –Ω–∞–∑–≤–∞–Ω–∏—è
     */
    static async searchChapterByPattern(generatedId, courseId) {
        try {
            // –ü–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞ - –º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å –µ—Å–ª–∏ –ø–æ—è–≤–∏—Ç—Å—è –ø–æ–∏—Å–∫–æ–≤–æ–µ API
            console.log('üîé Pattern search not implemented yet for:', generatedId);
            return null;
        } catch (error) {
            console.error('‚ùå Pattern search failed:', error);
            return null;
        }
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ–º chapter ID
     */
    static async getChapterMaterialsWithResolvedId(generatedChapterId, courseId = null, moduleId = null, chapterTitle = 'Chapter') {
        try {
            // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ø—Ä–æ–±—É–µ–º —Ä–∞–∑—Ä–µ—à–∏—Ç—å –Ω–∞—Å—Ç–æ—è—â–∏–π chapter ID
            const realChapterId = await this.resolveChapterId(generatedChapterId, courseId, moduleId);
            
            console.log('üéØ Using resolved chapter ID for materials:', realChapterId);
            
            // –¢–µ–ø–µ—Ä—å –ø–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã —Å –Ω–∞—Å—Ç–æ—è—â–∏–º ID
            const result = await coursesService.getChapterMaterialsWithFallback(realChapterId, chapterTitle);
            
            // –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –º–∞—Ç–µ—Ä–∏–∞–ª—ã —Å –Ω–∞—Å—Ç–æ—è—â–∏–º ID, –æ—Ç–ª–∏—á–Ω–æ!
            if (result.success && result.data.length > 0 && !result.data[0].isPlaceholder) {
                console.log('‚úÖ Found materials with resolved ID:', result.data.length);
                return result;
            }
            
            // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏, –ø–æ–ø—Ä–æ–±—É–µ–º —Å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º ID
            console.log('üîÑ Trying with original generated ID:', generatedChapterId);
            return await coursesService.getChapterMaterialsWithFallback(generatedChapterId, chapterTitle);
            
        } catch (error) {
            console.error('‚ùå Error getting materials with resolved ID:', error);
            // Fallback –∫ –æ–±—ã—á–Ω–æ–º—É –º–µ—Ç–æ–¥—É
            return await coursesService.getChapterMaterialsWithFallback(generatedChapterId, chapterTitle);
        }
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã chapter ID –¥–ª—è –ø–æ–∏—Å–∫–∞
     */
    static getPossibleChapterIds(generatedId, courseId, moduleId) {
        const possibilities = [generatedId]; // –ù–∞—á–∏–Ω–∞–µ–º —Å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã —Å —Ä–∞–∑–Ω—ã–º–∏ —Ñ–æ—Ä–º–∞—Ç–∞–º–∏
        if (generatedId.includes('_chapter_')) {
            const basePart = generatedId.split('_chapter_')[0];
            const chapterNum = generatedId.split('_chapter_')[1];
            
            possibilities.push(
                `${basePart}-chapter-${chapterNum}`,
                `${basePart}.chapter.${chapterNum}`,
                `chapter_${chapterNum}_${basePart}`,
                `${courseId}_${chapterNum}`,
                `${moduleId}_${chapterNum}`
            );
        }
        
        return possibilities;
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è ID
     */
    static getResolutionStats() {
        return {
            cacheSize: this.chapterIdCache.size,
            cachedMappings: Array.from(this.chapterIdCache.entries()),
            lastResolutionTime: new Date().toISOString()
        };
    }
    
    /**
     * –û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è ID
     */
    static clearCache() {
        this.chapterIdCache.clear();
        console.log('üóëÔ∏è Chapter ID cache cleared');
    }
    
    /**
     * –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è ID –¥–ª—è –∫—É—Ä—Å–∞
     */
    static async preloadChapterIds(courseId) {
        try {
            console.log('üîÑ Preloading chapter IDs for course:', courseId);
            
            const courseResult = await coursesService.getCourseById(courseId);
            if (courseResult.success && courseResult.data.all_chapters) {
                courseResult.data.all_chapters.forEach((chapter, index) => {
                    const generatedId = `${courseId}_chapter_${index}`;
                    const realId = chapter.id || chapter.chapterId || chapter._id;
                    
                    if (realId) {
                        this.chapterIdCache.set(generatedId, realId);
                        console.log(`üìã Preloaded: ${generatedId} ‚Üí ${realId}`);
                    }
                });
                
                console.log('‚úÖ Preloaded chapter IDs:', this.chapterIdCache.size);
            }
            
        } catch (error) {
            console.error('‚ùå Error preloading chapter IDs:', error);
        }
    }
}

export default ChapterIdResolver;